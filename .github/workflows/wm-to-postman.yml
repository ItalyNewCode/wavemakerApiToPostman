name: REUSABLE ACTION - Build a backup of Postman collection to S3 and migrate from Wavemaker to Postman

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: '22.11.0'
      npm-version:
        required: false
        type: string
        default: '10.9.0'
      aws-region:
        required: false
        type: string
        default: 'eu-west-1'
      s3-bucket:
        required: false
        type: string
      s3-prefix:
        required: false
        type: string
        default: 'postman-collections'
      file-base:
        required: false
        type: string
        default: 'collection'
      target-collection:
        type: string
        required: true
        default: 'WM API Collection'
      upload-to-s3:
        type: boolean
        required: false
        default: true
    secrets:
      POSTMAN_API_KEY:
        required: true
      POSTMAN_WORKSPACE_ID:
        required: true
      AWS_ACCESS_KEY_ID_1:
        required: false
      AWS_SECRET_ACCESS_KEY_1:
        required: false
      AWS_ACCESS_KEY_ID_2:
        required: false
      AWS_SECRET_ACCESS_KEY_2:
        required: false

jobs:
  postman-collection-to-s3:
    if: ${{ inputs.upload-to-s3 == true }}
    name: Download Postman Collection and upload to S3
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (no code needed, but keeps workspace sane)
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # ---- Try AWS Key Pair #1 ----
      - name: Configure AWS credentials (Key #1)
        id: cfg1
        if: ${{ secrets.AWS_ACCESS_KEY_ID_1 && secrets.AWS_SECRET_ACCESS_KEY_1 }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_1 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_1 }}
          aws-region: ${{ inputs.aws-region }}

      - name: Verify AWS auth (Key #1)
        id: verify1
        if: ${{ steps.cfg1.outcome == 'success' }}
        continue-on-error: true
        run: |
          set -e
          aws sts get-caller-identity >/dev/null
          echo "ok=1" >> "$GITHUB_OUTPUT"

      # ---- Fallback to AWS Key Pair #2 if Key #1 missing or failed ----
      - name: Configure AWS credentials (Key #2)
        id: cfg2
        if: ${{ (steps.verify1.outputs.ok != '1') && secrets.AWS_ACCESS_KEY_ID_2 && secrets.AWS_SECRET_ACCESS_KEY_2 }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          aws-region: ${{ inputs.aws-region }}

      - name: Verify AWS auth (Key #2)
        id: verify2
        if: ${{ steps.cfg2.outcome == 'success' }}
        continue-on-error: true
        run: |
          set -e
          aws sts get-caller-identity >/dev/null
          echo "ok=1" >> "$GITHUB_OUTPUT"

      - name: Fail if no AWS credentials worked
        if: ${{ steps.verify1.outputs.ok != '1' && steps.verify2.outputs.ok != '1' }}
        run: |
          echo "::error::No working AWS credentials (tried Key #1 then Key #2)."
          exit 1

      - name: Download Postman collection JSON
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
          COLLECTION_UID: ${{ secrets.POSTMAN_WORKSPACE_ID }}
        run: |
          set -euo pipefail
          POSTMAN_BASE="https://api.getpostman.com"
          # Download full response (includes { collection: {...} })
          curl -sS -H "X-Api-Key: ${POSTMAN_API_KEY}" \
            "${POSTMAN_BASE}/collections/${POSTMAN_WORKSPACE_ID}" \
            -o collection_full.json

          # Extract only the "collection" payload to keep a clean collection JSON
          jq -c '.collection' collection_full.json > collection.json

          echo "Saved collection.json"
          ls -l collection.json

      - name: Upload to S3
        env:
          BUCKET: ${{ inputs.s3-bucket }}
          PREFIX: ${{ inputs.s3-prefix }}
          FILE_BASE: ${{ inputs.file-base }}
        run: |
          set -euo pipefail
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          KEY="${PREFIX%/}/${FILE_BASE}-${TS}.json"
          echo "Uploading to s3://${BUCKET}/${KEY}"
          aws s3 cp collection.json "s3://${BUCKET}/${KEY}" --only-show-errors
          echo "s3://${BUCKET}/${KEY}" > s3_object_uri.txt

      - name: Output uploaded object URI
        run: |
          echo "Uploaded: $(cat s3_object_uri.txt)"

  swagger-to-postman:
    name: Migrate collection from Wavemaker to Postman
    runs-on: ubuntu-latest

    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }} 
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Use specific npm version
        run: npm i -g npm@${{ inputs.npm-version }}

      - name: Fetch wavemaker to postman javascript files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3.raw" \
            -o package.json \
            https://api.github.com/repos/ItalyNewCode/wavemakerApiToPostman/contents/package.json

          curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3.raw" \
            -o postman-swagger.js \
            https://api.github.com/repos/ItalyNewCode/wavemakerApiToPostman/contents/postman-swagger.js

          ls -al

      - name: Install script deps
        run: npm install

      - name: Run migration script
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
          POSTMAN_TARGET_UID: ${{ secrets.POSTMAN_WORKSPACE_ID }}
          POSTMAN_COLLECTION_NAME: ${{ inputs.target-collection }}
          POSTMAN_PRUNE: "true"
        run: node postman-swagger.js